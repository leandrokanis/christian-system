{"remainingRequest":"/Users/leandrokanis/christian-system/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/leandrokanis/christian-system/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/leandrokanis/christian-system/docs/Part I: The Christian System/11. The Attributes of a True Sin-Offering.md?vue&type=template&id=111931bc","dependencies":[{"path":"/Users/leandrokanis/christian-system/docs/Part I: The Christian System/11. The Attributes of a True Sin-Offering.md","mtime":1706584820527},{"path":"/Users/leandrokanis/christian-system/node_modules/cache-loader/dist/cjs.js","mtime":1706559905946},{"path":"/Users/leandrokanis/christian-system/node_modules/cache-loader/dist/cjs.js","mtime":1706559905946},{"path":"/Users/leandrokanis/christian-system/node_modules/babel-loader/lib/index.js","mtime":1696606865443},{"path":"/Users/leandrokanis/christian-system/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1706560022209},{"path":"/Users/leandrokanis/christian-system/node_modules/cache-loader/dist/cjs.js","mtime":1706559905946},{"path":"/Users/leandrokanis/christian-system/node_modules/vue-loader/lib/index.js","mtime":1706560022209},{"path":"/Users/leandrokanis/christian-system/node_modules/@vuepress/markdown-loader/index.js","mtime":1706560022604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PG9sIHN0YXJ0PSIxMSI+CjxsaT4KPHA+VGhlIEF0dHJpYnV0ZXMgb2YgYSBUcnVlIFNpbi1PZmZlcmluZzwvcD4KPHA+QSBzaW5nbGUgYWN0aW9uIG9yIGV2ZW50IG9mdGVuIGludm9sdmVzLCBpbiB3ZWFsIG9yIHdvZSwgYSBmYW1pbHksIGEgbmF0aW9uLCBhbiBlbXBpcmUuIFdobyBjYW4gY291bnQgdGhlIGVmZmVjdHMgb3IgYmVhcmluZ3Mgb2YgdGhlIGVsZXZhdGlvbiAgb3IgIGZhbGwgIG9mICBhICBDZXNhciwgIGEgIEhhbm5pYmFsLCAgYSAgTmFwb2xlb24/ICBBICBzaW5nbGUgdmljdG9yeSwgbGlrZSB0aGF0IG9mIFphbWEsIG9yIG9mIFdhdGVybG9vOyBhIHNpbmdsZSByZXZvbHV0aW9uLCBsaWtlIHRoYXQgb2YgRW5nbGFuZCwgb3IgQW1lcmljYSwgc29tZXRpbWVzIGludm9sdmVzIHRoZSBmb3J0dW5lcyBvZiBhIHdvcmxkLiBOZWl0aGVyIGFjdGlvbnMgbm9yIGV2ZW50cyBjYW4gYmUgYXBwcmVjaWF0ZWQgYnV0IHRocm91Z2ggdGhlaXIgYmVhcmluZ3MgYW5kIHRlbmRlbmNpZXMgdXBvbiBldmVyeSBwZXJzb24gYW5kIHRoaW5nIHdpdGggd2hpY2ggdGhleSBjb21lIGluIGNvbnRhY3QuIFRoZSByZWxhdGlvbnMsIGNvbm5lY3Rpb25zLCBhbmQgY3JpdGljYWwgZGVwZW5kZW5jaWVzICBpbiAgd2hpY2ggIHBlcnNvbnMgIGFuZCAgYWN0aW9ucyAgc3RhbmQgIGFyZSAgb2Z0ZW4gIHNvIG51bWVyb3VzIGFuZCBzbyB2YXJpb3VzLCB0aGF0IGl0IGlzIHNlbGRvbSwgb3IgcGVyaGFwcywgYXQgYWxsLCBpbiB0aGUgcG93ZXIgb2YgbWFuIHRvIGNhbGN1bGF0ZSB0aGUgY29uc2VxdWVuY2VzLCBvciB0aGUgdmFsdWUgb2Ygb25lIG9mIGEgdGhvdXNhbmQgb2YgdGhlIG1vcmUgcHJvbWluZW50IGFjdGlvbnMgb2YgaGlzIGxpZmUuPC9wPgo8L2xpPgo8L29sPgo8cD5XaG8gY291bGQgaGF2ZSBlc3RpbWF0ZWQsIG9yIHdobyBjYW4gZXN0aW1hdGUsIHRoZSBtb3JhbCBvciB0aGUgcG9saXRpY2FsIGJlYXJpbmdzIG9mIHRoZSBzYWxlIG9mIEpvc2VwaCB0byBhIGJhbmQgb2YgSXNobWFlbGl0ZXMg4oCUIG9mIHRoZSBleHBvc3VyZSBvZiBNb3NlcyBpbiBhIGNyYWRsZSBvZiBydXNoZXMgb24gdGhlIE5pbGUg4oCUIG9mIHRoZSBhbm9pbnRpbmcgIG9mICBEYXZpZCAga2luZyAgb2YgIElzcmFlbCDigJQgb2YgIHRoZSAgc2NoaXNtICBvZiAgdGhlICB0d2VsdmUgdHJpYmVzIHVuZGVyIFJlaG9ib2FtIOKAlCBvZiB0aGUgdHJlYWNoZXJ5IG9mIEp1ZGFzLCB0aGUgbWFydHlyZG9tIG9mIFN0ZXBoZW4sIHRoZSBjb252ZXJzaW9uIG9mIFBhdWwsIHRoZSBhY2Nlc3Npb24gb2YgQ29uc3RhbnRpbmUgdGhlIEdyZWF0LCB0aGUgYXBvc3Rhc3kgb2YgSnVsaWFuLCB0aGUgY3J1c2FkZXMgYWdhaW5zdCB0aGUgVHVya3MsIHRoZSByZWZvcm1hdGlvbiBvZiBMdXRoZXIsIHRoZSByZXZpdmFsIG9mIGxldHRlcnMsIG9yIGFueSBvZiB0aGUgZ3JlYXQgbW92ZW1lbnRzIG9mIHRoZSBwcmVzZW50IGRheT8gSG93IGRpZmZpY3VsdCwgdGhlbiwgaXMgaXQgdG8gZXN0aW1hdGUgdGhlIHJlYmVsbGlvbiBvZiBTYXRhbiwgdGhlIGZhbGwgb2YgQWRhbSwgdGhlIGRlYXRoIG9mIENocmlzdCwgaW4gYWxsIHRoZWlyIGJlYXJpbmdzIHVwb24gdGhlIGRlc3RpbmllcyBvZiB0aGUgdW5pdmVyc2UhPC9wPgo8cD5CZWZvcmUgYSByZW1lZHkgZm9yIHNpbiBjb3VsZCBlaXRoZXIgYmUgZGV2aXNlZCBvciBhcHByZWNpYXRlZCBhIGtub3dsZWRnZSAgb2YgIGl0cyAgYmVhcmluZ3MgIHVwb24gIEdvZCAgYW5kICBtYW4sICB1cG9uICB0aW1lICBhbmQgZXRlcm5pdHksIHVwb24gaGVhdmVuIGFuZCBlYXJ0aCwgaXMgYW4gaW5kaXNwZW5zYWJsZSBwcmVyZXF1aXNpdGUuIEJ1dCB3aG8gcG9zc2Vzc2VzIHRoaXMga25vd2xlZGdlLCBvciB3aGF0IHVuaW5zcGlyZWQgbWFuIGNhbiBhdHRhaW4gIGl0PyAgQXQgIGJlc3QgIHdlICBrbm93ICBidXQgIGluICBwYXJ0OyAgYW5kLCAgdGhlcmVmb3JlLCAgY2FuICBidXQgcGFydGlhbGx5ICBleHBsYWluICBhbnl0aGluZy4gIEhvdyAgZGlmZmljdWx0LCAgdGhlbiwgIHRvICBmb3JtICBhIHNhdGlzZmFjdG9yeSB2aWV3IG9mIHNpbiBhbmQgaXRzIHJlbWVkeSDigJQgb2YgdGhlIGZhbGwgb2YgQWRhbSBhbmQgdGhlIGRlYXRoIG9mIENocmlzdCE8L3A+CjxwPkl0ICB3b3VsZCwgIGhvd2V2ZXIsICBncmVhdGx5ICBhaWQgIG91ciAgY29uY2VwdGlvbnMgIG9mICB0aGUgIGRlYXRoICBvZiBDaHJpc3QsIGFuZCBpbGx1c3RyYXRlIHRoZSBuYXR1cmUgYW5kIHVzZSBvZiA8ZW0+c2luLW9mZmVyaW5ncyw8L2VtPiBjb3VsZCB3ZSBvYnRhaW4gIGp1c3QgIGFuZCAgc2NyaXB0dXJhbCAgdmlld3MgIG9mICBzaW4gIGluICBpdHMgIG5lY2Vzc2FyeSBjb25zZXF1ZW5jZXMsICBvciAgaW4gIGl0cyAgcHJvbWluZW50ICBiZWFyaW5ncyAgdXBvbiAgdGhlICB1bml2ZXJzZS4gSW5kZWVkLCBzb21lIGtub3dsZWRnZSBvZiB0aGVzZSBhc3BlY3RzIG9mIHNpbiBpcyBlc3NlbnRpYWwgdG8gb3VyIHBlcmNlcHRpb24gYW5kIGFwcHJlY2lhdGlvbiBvZiB0aGUgd2lzZG9tLCBqdXN0aWNlLCBhbmQgZ3JhY2Ugb2YgdGhlIENocmlzdGlhbiBzeXN0ZW0uIEl0IGlzIG5vdCBlbm91Z2ggdGhhdCB3ZSBlbnRlcnRhaW4gYSBmZXcgdmFndWUgYW5kIGluZGlzdGluY3Qgbm90aW9ucyBvZiBpdHMgdGVuZGVuY2llcywgb3Igb2YgdGhlIGF0dGl0dWRlcyBpbiB3aGljaCBpdCBzdGFuZHMgdG8gR29kLCBvdXJzZWx2ZXMsIGFuZCBvdXIgZmVsbG93czogd2UgbXVzdCBoYXZlIGNsZWFyIGFuZCBkZWZpbml0ZSB2aWV3cyBvZiB0aGUgcmVsYXRpb25zIGluIHdoaWNoIEdvZCBzdGFuZHMgdG8gdXMsIGFuZCB3ZSB0byBoaW0gYW5kIHRvIG9uZSBhbm90aGVyLCBhbmQgaG93IHNpbiBhZmZlY3RzIHVzIGFsbCBpbiB0aGVzZSByZWxhdGlvbnM6IGZvciB0aGF0IGl0IGJlYXJzIGEgcGVjdWxpYXIgYXNwZWN0IHRvIGVhY2ggb2YgdXMgaW4gYWxsIHRoZXNlIHJlbGF0aW9ucyB3aWxsLCB3ZSBkb3VidCBub3QsIGJlIGNvbmNlZGVkIHdpdGhvdXQgZGViYXRlLjwvcD4KPHA+R29kICBzdGFuZHMgIGluICBkaXZlcnNlICByZWxhdGlvbnMgIHRvICB0aGUgIGludGVsbGVjdHVhbCAgYW5kICBtb3JhbCBjcmVhdGlvbi4gSGUgaXMgb3VyIEZhdGhlciwgb3VyIExhd2dpdmVyLCBhbmQgb3VyIEtpbmcuIE5vdyBoaXMgZmVlbGluZ3MgYXMgYSBmYXRoZXIsIGFuZCBoaXMgY2hhcmFjdGVyIGFzIGEgbGF3Z2l2ZXIgYW5kIHNvdmVyZWlnbiwgYXJlICBlcXVhbGx5ICBpbnZvbHZlZCAgaW4gIHRoZSAgYmVhcmluZ3MgIGFuZCAgYXNwZWN0cyAgb2YgIHNpbi4gIFRoZSBpbmZsdWVuY2Ugb2Ygc2luIHVwb24gb3Vyc2VsdmVzIGlzIGFsc28gdmFyaW91cyBhbmQgbXVsdGlmb3JtLiBJdCBhZmZlY3RzIHRoZSBoZWFydCB0aGUgY29uc2NpZW5jZSwgdGhlIHdob2xlIHNvdWwgYW5kIGJvZHkgb2YgbWFuLiBJdCBhbGllbmF0ZXMgb3VyIGFmZmVjdGlvbnMsIGFuZCBldmVuIHdvcmtzIGhhdHJlZCB0byBvdXIgbWluZHMgYm90aCB0b3dhcmRzIEdvZCBhbmQgbWFuLiBBcyBhbiBhbmNpZW50IGFkYWdlIHNheXMsICZxdW90O1dlIGhhdGUgdGhvc2Ugd2UgaGF2ZSBpbmp1cmVkOyZxdW90OyBhbmQgaGF2aW5nIG9mZmVuZGVkIEdvZCBvdXIgRmF0aGVyLCB3ZSBhcmUsIGZvciB0aGF0IHZlcnkgcmVhc29uLCBmaWxsZWQgd2l0aCBlbm1pdHkgYWdhaW5zdCBoaW0uIEl0IGFsc28gb3BwcmVzc2VzIGFuZCBwb2xsdXRlcyB0aGUgY29uc2NpZW5jZSB3aXRoIGl0cyBndWlsdCBhbmQgZHJlYWQsIGFuZCBlbnNsYXZlcyB0aGUgcGFzc2lvbnMgYXMgd2VsbCBhcyB3b3JrcyB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGJvZHkuIEl0IGFsc28gYWxpZW5hdGVzIG1hbiBmcm9tIG1hbiwgd2Vha2VucyB0aGUgYXV0aG9yaXR5IGFuZCBkZXN0cm95cyB0aGUgdXRpbGl0eSBvZiB0aGUgbGF3OyBhbmQsIGlmIG5vdCBzdWJkdWVkLCB3b3VsZCB1bHRpbWF0ZWx5IHN1YnZlcnQgdGhlIHRocm9uZSBhbmQgZ292ZXJubWVudCBvZiBHb2QuIElmIG5vdCByZXN0cmFpbmVkIGFuZCBwdXQgZG93biwgaXQgd291bGQgZmlsbCB0aGUgdW5pdmVyc2Ugd2l0aCBhbmFyY2h5IGFuZCBkaXNvcmRlciDigJQgd2l0aCB1bml2ZXJzYWwgbWlzZXJ5IGFuZCBydWluLjwvcD4KPHA+VG8gZ28gbm8gZmFydGhlciBpbnRvIGRldGFpbHMsIGl0IG1heSwgb24gdGhlIHByZW1pc2VzIGFscmVhZHkgYmVmb3JlIHVzLCBiZSBvYnNlcnZlZDog4oCUIDFzdC4gVGhhdCBldmVyeSBzaW4gd291bmRzIHRoZSBhZmZlY3Rpb24gb2Ygb3VyIGhlYXZlbmx5IEZhdGhlciDigJQgMmQuIEluc3VsdHMgYW5kIGRpc2hvbm9ycyBoaXMgbGF3IGFuZCBhdXRob3JpdHkgaW4gdGhlIGVzdGltYXRpb24gb2YgaGlzIG90aGVyIHN1YmplY3RzIOKAlCAzZC4gQWxpZW5hdGVzIG91ciBoZWFydHMgZnJvbSBoaW0g4oCUIDR0aC4gIE9wcHJlc3NlcyAgb3VyICBjb25zY2llbmNlICB3aXRoICBndWlsdCAgYW5kICBkcmVhZCDigJQgNXRoLiBTZXZlcnMgdXMgZnJvbSBzb2NpZXR5IGJ5IGl0cyBtb3JiaWQgc2VsZmlzaG5lc3MgYW5kIGRpc3JlZ2FyZCBmb3IgbWFuIOKAlCA1dGguICBJbmR1Y2VzICB0byAgbmV3ICBpbmZyYWN0aW9ucyAgYW5kICBoYWJpdHVhbCAgdmlvbGF0aW9ucyAgb2YgcmlnaHQg4oCUIEFuZCwgN3RoLiBTdWJqZWN0cyB1cyB0byBzaGFtZSBhbmQgY29udGVtcHQg4oCUIG91ciBib2RpZXMgdG8gdGhlICBkdXN0LCAgYW5kICBvdXIgIHBlcnNvbnMgIHRvICBldmVybGFzdGluZyAgZGVzdHJ1Y3Rpb24gIGZyb20gIHRoZSBwcmVzZW5jZSBvZiB0aGUgTG9yZC48L3A+CjxwPk5vdCBhcyB0aGUgZnVsbCB0YWxlLCBidXQgcmF0aGVyIGFzIGEgc3BlY2ltZW4gb2YgdGhlIGxvc3Mgc3VzdGFpbmVkLCBhbmQgIG9mICB0aGUgIG1pc2NoaWVmICBkb25lLCAgYnkgIG91ciAgdHJhbnNncmVzc2lvbiwgIHdlICBoYXZlICBtYWRlIHRoZXNlIHNldmVuIHNwZWNpZmljYXRpb25zLiBUaGVzZSBvbmx5IHNlcnZlIHRvIHNob3cgaW4gaG93IG1hbnkgYXNwZWN0cyAgc2luICBtdXN0ICBiZSAgY29udGVtcGxhdGVkICBiZWZvcmUgIHdlICBjYW4gIGZvcm0gIGEgIGp1c3QgZXN0aW1hdGUgb2YgYSBzdWl0YWJsZSBhbmQgc3VmZmljaWVudCBzaW4gb2ZmZXJpbmcgb3IgcmVtZWR5LjwvcD4KPHA+Tm93LCAgc28gIGZhciAgYXMgIHdlICBoYXZlICBiZWVuICBhYmxlICB0byAgdHJhY2UgIHRoZSAgdGVuZGVuY2llcyAgYW5kIGJlYXJpbmdzIG9mIHRyYW5zZ3Jlc3Npb24gaW4gdGhlIGFib3ZlIGVudW1lcmF0aW9uLCB3ZSBtdXN0IGZpbmQgaW4gdGhlIDxlbT5zaW4gb2ZmZXJpbmc8L2VtPiBhIHJlbWVkeSBhbmQgYW4gYW50aWRvdGUgd2hpY2ggd2lsbCBmdWxseSBtZWV0IGFsbCAgdGhlc2UgIGFzcGVjdHM7ICBvdGhlcndpc2UgIGl0ICB3aWxsICBiZSAgdXR0ZXJseSAgdmFsdWVsZXNzICBhbmQgdW5hdmFpbGluZyAgaW4gIHRoZSAgZXllICBvZiAgZW5saWdodGVuZWQgIHJlYXNvbiwgIGFzICB3ZWxsICBhcyAgaW4gIHRoZSByaWdodGVvdXMganVkZ21lbnQgb2YgR29kLCB0byBleHBpYXRlIHNpbnMsIHRvIHB1dCBpdCBhd2F5LCBhbmQgdG8gcHJldmVudCBpdHMgcmVjdXJyZW5jZS48L3A+CjxwPk5lZWQsIHdlIGRlbW9uc3RyYXRlIHRoYXQgbWFuIGhpbXNlbGYgY2Fubm90IGZ1cm5pc2ggc3VjaCBhIHNpbiBvZmZlcmluZyEgTmVlZCB3ZSBhZ2FpbiBwcm9wb3VuZCBNaWNhaCdzIHF1ZXN0aW9uIOKAlCAmcXVvdDtXaGVyZXdpdGggc2hhbGwgSSBjb21lIGJlZm9yZSB0aGUgTG9yZCwgYW5kIGJvdyBteXNlbGYgYmVmb3JlIHRoZSBoaWdoIEdvZD8gU2hhbGwgSSBjb21lIGJlZm9yZSBoaW0sIHdpdGggYnVybnQgb2ZmZXJpbmdzOyB3aXRoIGNhbHZlcyBvZiBhIHllYXIgb2xkPyBXaWxsIHRoZSBMb3JkIGJlIHBsZWFzZWQgd2l0aCB0aG91c2FuZHMgb2YgcmFtcywgb3Igd2l0aCB0ZW4gdGhvdXNhbmRzICBvZiAgcml2ZXIgIG9mICBvaWw/ICBTaGFsbCAgSSAgZ2l2ZSAgbXkgIGZpcnN0ICBib3JuICBmb3IgIG15IHRyYW5zZ3Jlc3Npb247IHRoZSBmcnVpdCBvZiBteSBib2R5IGZvciB0aGUgc2luIG9mIG15IHNvdWwuJnF1b3Q7IFdpbGwgcmVwZW50YW5jZSBmb3IgdGhlIHBhc3QsIGFuZCBmdXR1cmUgYW1lbmRtZW50IHBsYWNlIHRoaW5ncyBhcyB0aGV5IHdlcmU7IHJhaXNlIHRoZSBtdXJkZXJlZCBkZWFkOyByZXBhaXIgd2FzdGVkIGZvcnR1bmVzLCBhbmQgcmVjcnVpdCBicm9rZW4gY29uc3RpdHV0aW9ucz8gV2lsbCB0ZWFycywgYW5kIGdyb2FucywgYW5kIGFnb25pZXMsIGhvbm9yIGEgdmlvbGF0ZWQgbGF3LCBzdXN0YWluIGEgcmlnaHRlb3VzIGdvdmVybm1lbnQsIHZpbmRpY2F0ZSB0aGUgRGl2aW5lIGNoYXJhY3RlciwgYW5kIHByZXZlbnQgZnV0dXJlIGFuZCBmdXJ0aGVyIGVub3JtaXRpZXM/IEhhdmUgdGhlIGV2ZXIgZG9uZSBpdD8gQ2FuIHRoZXkgZXZlciBkbyBpdD8gU3VyZWx5LCB3ZSBzaGFsbCBiZSBleGN1c2VkIGZvciBub3QgYXR0ZW1wdGluZyB0byBwcm92ZSB0aGF0IHdlIGhhdmUgbmVpdGhlciBhIHRlYXIsIG5vciBhIHNpZ2gsIG5vciBhbiBhZ29ueSwgbm9yIGEgbGFtYiwgbm9yIGEga2lkIG9mIG91ciBvd24gY3JlYXRpb24sIHRvIG9mZmVyIHRvIHRoZSBMb3JkLCBldmVuIHdlcmUgc3VjaCBhIHNhY3JpZmljZSBhdmFpbGFibGUgdG8gbWVldCBhbGwgdGhlIGJlYXJpbmdzIG9mIHRoZSBjYXNlITwvcD4KPHA+RXZlcnkgdHJhbnNncmVzc2lvbiwgZXZlbiB0aGUgbGVhc3QsIHRoZSBlYXRpbmcgb2YgYSBmb3JiaWRkZW4gYXBwbGUsIHN1YmplY3RzIHRoZSB0cmFuc2dyZXNzb3IgdG8gZGVzdHJ1Y3Rpb24uIE9uZSBzaW4sIG9mIG9uZSBtYW4sIGhhcyBpbnZvbHZlZCB0aGUgd2hvbGUgcmFjZSBpbiBkZWF0aC4gVGhlIGxpZmUgb2YgdGhlIHRyYW5zZ3Jlc3NvciBpcyBkZW1hbmRlZCBpbiB0aGUgdmVyeSBtaWxkZXN0IGFjY2VudHMgb2YgaW5zdWx0ZWQganVzdGljZS4gSGVuY2UsIGluIHRoZSBsYXcgb2YgdGhlIHR5cGljYWwgc2luIG9mZmVyaW5ncywgd2UgZmluZCBpdCB0aHVzIHdyaXR0ZW46ICZxdW90O1RoZSA8ZW0+bGlmZTwvZW0+IG9mIHRoZSBmbGVzaCBpcyBpbiB0aGUgPGVtPmJsb29kOjwvZW0+IGFuZCBJIGhhdmUgZ2l2ZW4gaXQgdG8geW91IHVwb24gdGhlIGFsdGFyLCB0byBtYWtlIGFuIGF0b25lbWVudCBmb3IgeW91ciBzb3VsczogPHN0cm9uZz5mb3IgaXQgaXMgdGhlIGJsb29kIHRoYXQgbWFrZXRoIGFuIGF0b25lbWVudCBmb3IgdGhlIHNvdWwuPC9zdHJvbmc+JnF1b3Q7MSBCdXQgc3VjaCBibG9vZCwgc3VjaCBsaXZlcyBhcyAgdGhlICBsYXcgIHJlcXVpcmVkICBjb3VsZCAgbm90LCAgUGF1bCAgYW5kICBDb21tb24gIFNlbnNlICBiZWluZyBqdWRnZSwgdGFrZSBhd2F5IHNpbi4gVGhleSBjb3VsZCBvbmx5IHByZWZpZ3VyZSBhIDxlbT5saWZlPC9lbT4gYW5kIGEgPGVtPmJsb29kPC9lbT4gdGhhdCBjb3VsZCAgdHJ1bHksIGFuZCBqdXN0bHksIGFuZCBob25vcmFibHkgIGV4cGlhdGUgaXQuIFRodXMsICA8ZW0+dGhlIGRlYXRoIG9mIENocmlzdDwvZW0+IGlzIGZvcmNlZCB1cG9uIG91ciBhdHRlbnRpb24gYnkgdGhlIGxhdywgYnkgdGhlIHByb3BoZXRzLCBieSB0aGUgbmVjZXNzaXR5IG9mIHRoZSBjYXNlLCBlbmxpZ2h0ZW5lZCBSZWFzb24gYmVpbmcgaW4gdGhlIGNoYWlyLCBhcyB0aGUgb25seSByZWFsLCB0cnVlLCBhbmQgcHJvcGVyIHNpbi1hdG9uaW5nIG9mZmVyaW5nLiBJdCBkb2VzLCBpbmRlZWQsIG1lZXQgbm90IG9ubHkgdGhlIGFib3ZlIHNldmVuIHBhcnRpY3VsYXJzLCBidXQgYWxsIG90aGVycyB3aGljaCBoYXZlIG9jY3VycmVkIHRvIHRoZSBodW1hbiBtaW5kOyBhbmQgdGh1cyBzZWN1cmVzIHRoZSB1bmlvbiBhbmQgaGFybW9ueSBvZiB0aGluZ3Mgb24gZWFydGgsIGFuZCBvZiB0aGluZ3MgaW4gaGVhdmVuLCBpbiB0aGUgaW52aW9sYWJsZSBib25kcyBvZiBhbiBldmVybGFzdGluZyBicm90aGVyaG9vZC48L3A+CjxvbD4KPGxpPiZxdW90O0luIGJyaW5naW5nIG1hbnkgc29ucyB0byBnbG9yeSwmcXVvdDsgaXQgc29vdGhlcyBhbmQgZGVsaWdodHMgdGhlIHdvdW5kZWQgbG92ZSBvZiBvdXIga2luZCBhbmQgYmVuaWduYW50IGhlYXZlbmx5IEZhdGhlcuKAlDwvbGk+CjxsaT4mcXVvdDtJdCAgbWFnbmlmaWVzICBhbmQgIG1ha2VzICBob25vcmFibGUmcXVvdDsgIGhpcyAgdmlvbGF0ZWQgIGxhdyAgYW5kIGluc3VsdGVkIGdvdmVybm1lbnTigJQ8L2xpPgo8bGk+SXQgcmVjb25jaWxlcyBvdXIgaGVhcnRzIHRob3JvdWdobHkgYW5kIGZvcmV2ZXIgdG8gR29kLCBhcyBhIHByb29mICBhbmQgIHBsZWRnZSAgaW5jb250cm92ZXJ0aWJsZSAgb2YgIGhpcyAgd29uZGVyZnVsICBhbmQgaW5jb21wcmVoZW5zaWJsZSBsb3ZlIHRvIHVz4oCUPC9saT4KPGxpPkl0IGVmZmVjdHVhbGx5IHJlbGlldmVzIG91ciBjb25zY2llbmNlIGJ5ICZxdW90O2NsZWFuc2luZyB1cyBmcm9tIGFsbCBzaW4sJnF1b3Q7IGFuZCBwcm9kdWNlcyB3aXRoaW4gdXMgYSBkaXZpbmUgc2VyZW5pdHksIGEgcGVhY2UgYW5kIGpveSAmcXVvdDt1bnNwZWFrYWJsZSBhbmQgZnVsbCBvZiBnbG9yeSZxdW90O+KAlDwvbGk+CjxsaT5JdCBhbHNvIHJlY29uY2lsZXMgdXMgdG8gb3VyIGZlbGxvd3MsIGFuZCBmaWxscyB1cyB3aXRoIGJyb3RoZXJseSBhZmZlY3Rpb24gYW5kIHVuaXZlcnNhbCBiZW5ldm9sZW5jZSwgYmVjYXVzZSBpdCBtYWtlcyB1cyBhbGwgb25lIGluIGZhaXRoLCBpbiBob3BlLCBpbiBqb3ksIGFzIGpvaW50IGhlaXJzIG9mIGltbW9ydGFsaXR5IGFuZCBldGVybmFsIGxpZmXigJQ8L2xpPgo8bGk+SXQgaXMgdGhlIG1vc3QgZWZmZWN0dWFsIGd1YXJkIGFnYWluc3QgbmV3IGluZnJhY3Rpb25zIG9mIHRoZSBkaXZpbmUgbGF3LCBhbmQgc3VwZXJsYXRpdmVseSBkZXRlcnMgZnJvbSBzaW4sIGJ5IG9wZW5pbmcgdG8gdXMgaXRzIGRpYWJvbGljYWwgbmF0dXJlIGFuZCB0cmVtZW5kb3VzIGNvbnNlcXVlbmNlczsgc2hvd2luZyB1cyBpbiB0aGUgcGVyc29uIG9mIEdvZCdzIG9ubHkgYmVnb3R0ZW4gYW5kIHdlbGwgYmVsb3ZlZCBTb24sIHdoZW4gYSBzaW4gb2ZmZXJpbmcsIHRoZSBpbXBvc3NpYmlsaXR5IG9mIGVzY2FwZSwgZnJvbSB0aGUganVzdCBhbmQgIHJldHJpYnV0aXZlICBwdW5pc2htZW50ICBvZiAgaW5zdWx0ZWQgIGFuZCAgaW5kaWduYW50IEhlYXZlbiDigJQgYW5kPC9saT4KPGxpPkl0IGlzIGEgcmFuc29tIGZyb20gZGVhdGgsIGEgcmVkZW1wdGlvbiBmcm9tIHRoZSBncmF2ZSwgc3VjaCBhIGRlbGl2ZXJhbmNlIGZyb20gdGhlIGd1aWx0LCBwb2xsdXRpb24sIHBvd2VyLCBhbmQgcHVuaXNobWVudCBvZiBzaW4sICBhcyAgZ3JlYXRseSAgZWxldmF0ZXMgIHRoZSBzb25zICBvZiBHb2QgYWJvdmUgYWxsIHRoYXQgdGhleSBjb3VsZCBoYXZlIGF0dGFpbmVkIG9yIGVuam95ZWQgdW5kZXIgdGhlIGZpcnN0IGNvbnN0aXR1dGlvbi4gSXQgcHJlc2VudHMgYSBuZXcgY3JlYXRpb24gdG8gb3VyIHZpZXc7IOKAlCBuZXcgaGVhdmVucywgbmV3IGVhcnRoLCBuZXcgIGJvZGllcywgIG5ldyAgbGlmZSwgIG5ldyAgam95cywgIG5ldyAgZ2xvcmllcy4gIEhlICB0aGF0IHZhbnF1aXNoZWQgZGVhdGggYnkgZHlpbmcsIHdobyBub3cgc2l0cyB1cG9uIHRoZSB0aHJvbmUgc2F5cywgJnF1b3Q7QmVob2xkLCBJIG1ha2UgYWxsIHRoaW5ncyBuZXcuJnF1b3Q7ICZxdW90O0hlIGhhcyBiZWNvbWUgdGhlIEF1dGhvciBvZiBhbiBldGVybmFsIHNhbHZhdGlvbiB0byBhbGwgdGhhdCBvYmV5IGhpbS4mcXVvdDs8L2xpPgo8L29sPgo8cD5MZXQgbm8gb25lIGltYWdpbmUgdGhhdCBpbiB0aGlzIGV4ZW1wbGlmaWNhdGlvbiBvZiB0aGUgYXNwZWN0cyBpbiB3aGljaCBzaW4gYW5kIHNpbiBvZmZlcmluZ3MgbXVzdCBiZSBjb250ZW1wbGF0ZWQgYmVmb3JlIHdlIGNhbiByYXRpb25hbGx5ICBqdWRnZSAgb2YgIHRoZSAgbmVjZXNzaXR5LCAgdGhlICBzdWl0YWJsZW5lc3MsICBhbmQgIHRoZSBzdWZmaWNpZW5jeSBvZiB0aGUgZGVhdGggb2YgQ2hyaXN0LCB3ZSBoYXZlIGF0dGVtcHRlZCB0byBwcmVzZW50IGEgZnVsbCB2aWV3IG9mIHRoZXNlIGFzcGVjdHMuIFdlIGFyZSBpbmNvbXBldGVudCB0byB0aGUgdGFzay4gVGhlIGxpZmUgaXMgIHRvbyAgc2hvcnQsICBhbmQgIG91ciAgb3Bwb3J0dW5pdGllcyAgdG9vICBsaW1pdGVkLCAgdG8gIGxlYXJuICBhbGwgIHRoZSBiZWFyaW5ncyAgb2YgIHRyYW5zZ3Jlc3Npb24gIHVwb24gIG91cnNlbHZlcywgIHRoZSAgdGhyb25lICBhbmQgZ292ZXJubWVudCAgb2YgIEdvZCwgIGFuZCAgaGlzICBvdGhlciAgc3ViamVjdHMuICBXZSAgb25seSAgaW50ZW5kICBhIHNwZWNpbWVuIG9mIHRoZSBwb2ludHMgdG8gYmUgbWV0IGluIGEgcHJvcGVyIHNpbiBvZmZlcmluZy4gVGhlc2UgcHV0IGl0ICBvdXQgIG9mICB0aGUgIHJlYWNoICBvZiAgYWxsICBodW1hbiwgIG9mICBhbGwgIGFuZ2VsaWMsICBvZiAgYWxsICBjcmVhdGVkIG1lZGlhdG9ycywgdmljdGltcywgb3Igc2FjcmlmaWNlcyB0byBleHBpYXRlIHNpbi4gU28gZmFyIGFzIHdlIGNhbiBjb21wcmVoZW5kIHRoaXMgd29uZGVyZnVsIHN1YmplY3QsIHdlIGFyZSBtb3JlIGFuZCBtb3JlIGRlZXBseSBwZW5ldHJhdGVkICB3aXRoICB0aGUgIGNvbnZpY3Rpb24sICB0aGF0ICBub3RoaW5nICBpbmZlcmlvciAgdG8gIHRoZSB2b2x1bnRhcnkgc2FjcmlmaWNlIG9mIHRoZSBTb24gb2YgR29kLCBjb3VsZCBwdXQgYXdheSBzaW47IGFuZCBtYWtlIGl0IGJvdGgganVzdCwgYW5kIG1lcmNpZnVsLCBhbmQgaG9ub3JhYmxlLCBhbmQgc2FmZSwgb24gdGhlIHBhcnQgb2YgaGlzIEdvZCBhbmQgRmF0aGVyLCB0byBmb3JnaXZlIGFuZCBzYXZlIG9uZSBvZiBoaXMgcmViZWwgcmFjZS4gIE5vciAgd291bGQgIGl0ICB0aGVuICBoYXZlICBiZWVuICBqdXN0LCAgYWNjb3JkaW5nICB0byAgb3VyIGNvbmNlcHRpb24sIHRvICBoYXZlIGNvbXBlbGxlZCBoaW0gdG8gYmVhciBvdXIgaW5pcXVpdGllcywgb3IgdG8gc3VmZmVyIHRoZSBqdXN0IGZvciB0aGUgdW5qdXN0OyB0byBpbmZsaWN0IG9uIGFuIGlubm9jZW50IHBlcnNvbiwgdGhlIGNoYXN0aXNlbWVudCBvZiBvdXIgb2ZmZW5jZXM7IGJ1dCBpdCB3YXMgYm90aCBqdXN0IGFuZCBraW5kIG9uIHRoZSBwYXJ0ICBvZiAgb3VyICBoZWF2ZW5seSAgRmF0aGVyLCAgdG8gIGFjY2VwdCAgZm9yICB1cyAgdGhlICB2b2x1bnRhcnkgc3VycmVuZGVyIG9mIGhpcyBTb24sIGFzIGEgd2lsbGluZyBzYWNyaWZpY2UgZm9yIG91ciBzaW5zLiAmcXVvdDtUaGFua3MgYmUgdG8gR29kLCBmb3IgaGlzIHVuc3BlYWthYmxlIGdpZnQhJnF1b3Q7PC9wPgo8cD48c3Ryb25nPjEgTGV2LiAxNzogMTEuPC9zdHJvbmc+PC9wPgo8L0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yPgo="},null]}